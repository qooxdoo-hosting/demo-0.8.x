{type:"class",attributes:{"name":"Array","packageName":"qx.data","superClass":"qx.core.Object","fullName":"qx.data.Array","type":"class"},children:[{type:"desc",attributes:{"text":"<p><span class=\"caps\">EXPERIMENTAL</span>!</p>\n\n<p>Mapping class of the native JavaScript array. This does have all the native\nmethods but fires event if the content of the array changes in any way.\nAlso the <code>.length</code> property is available on the array.</p>"}},{type:"constructor",children:[{type:"method",attributes:{"overriddenFrom":"qx.core.Object","isCtor":"true","name":"ctor"},children:[{type:"params",children:[{type:"param",attributes:{"name":"param"},children:[{type:"desc",attributes:{"text":"<p>The parameter can be some types.</p>\n\n<p>Without a parameter a new blank array will be created.</p>\n\n<p>If there is more than one parameter ist given, the parameter will be\n  added directly to the new array.</p>\n\n<p>If the parameter is a number, a new Array with the given lenght will be\n  created.</p>\n\n<p>If the paramter is a javascript array, a new array containing the given\n  elements will be created.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Creates a new instance of an array.</p>"}}]}]},{type:"events",children:[{type:"event",attributes:{"name":"change"},children:[{type:"desc",attributes:{"text":"<p>The change event which will be fired if there is a change in the array.\nThe data contains a map with three key value pairs:\n<li>start: The start index of the change.</li>\n<li>end: The end index of the change.</li>\n<li>type: The type of the change as a String. This can be &#8216;add&#8217; or \n&#8216;remove&#8217;</li></p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.event.type.Data"}}]}]}]},{type:"methods",children:[{type:"method",attributes:{"access":"private","name":"__updateLength"},children:[{type:"desc",attributes:{"text":"<p>Internal function wich updates the length property of the array.</p>"}}]},{type:"method",attributes:{"name":"concat"},children:[{type:"params",children:[{type:"param",attributes:{"name":"array"},children:[{type:"desc",attributes:{"text":"<p>The javaScript array which should be concatinated\n  to the current array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"desc",attributes:{"text":"<p>Concatenates the current and the given array into a new one.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new array containing the values of both former\n  arrays.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"getArray"},children:[{type:"desc",attributes:{"text":"<p>Returns the native array.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The native array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Array"}}]}]}]},{type:"method",attributes:{"name":"getItem"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>The index requested of the array element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replacement function for the getting of the array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> should be array.getItem(0).</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The element at the given index.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"join"},children:[{type:"params",children:[{type:"param",attributes:{"name":"connector"},children:[{type:"desc",attributes:{"text":"<p>the string which should be used to past in\n between of the array values.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns the array as a string usting the given connerctor string to\nconnect the values.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The array as a string.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"String"}}]}]}]},{type:"method",attributes:{"name":"pop"},children:[{type:"desc",attributes:{"text":"<p>Removes and returns the last element of the array.\nAn change event will be fired.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The last element of the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"push"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>Multiple elements. Every element will be added to\n  the end of the array. An change event will be fired.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Adds a element at the end of the array.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>The new length of the array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"method",attributes:{"name":"reverse"},children:[{type:"desc",attributes:{"text":"<p>Reverses the order of the array. An change event will be fired.</p>"}}]},{type:"method",attributes:{"name":"setItem"},children:[{type:"params",children:[{type:"param",attributes:{"name":"index"},children:[{type:"desc",attributes:{"text":"<p>The index of the array element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]},{type:"param",attributes:{"name":"item"},children:[{type:"desc",attributes:{"text":"<p>The new item to set.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Replacement function for the setting of a array value.\narray<sup class=\"footnote\"><a href=\"#fn0\">0</a></sup> = &#8220;a&#8221; sould be array.setItem(0, &#8220;a&#8221;).\nA change event will be fired.</p>"}}]},{type:"method",attributes:{"name":"shift"},children:[{type:"desc",attributes:{"text":"<p>Removes the first element of the array and returns it. An change event\nwill be fired.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>the former first element.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"method",attributes:{"name":"slice"},children:[{type:"params",children:[{type:"param",attributes:{"name":"from"},children:[{type:"desc",attributes:{"text":"<p>The start index.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]},{type:"param",attributes:{"name":"to"},children:[{type:"desc",attributes:{"text":"<p>The end index.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Number"}}]}]}]},{type:"desc",attributes:{"text":"<p>Returns a new array with the values specified by the parameter.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>A new array containing the given range of values.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"sort"},children:[{type:"params",children:[{type:"param",attributes:{"name":"func"},children:[{type:"desc",attributes:{"text":"<p>A compare function comparing two parameters and\n  sould return a number.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"Function"}}]}]}]},{type:"desc",attributes:{"text":"<p>Sorts the array. If a sort function is given, this will be used to\ncompare the items.</p>"}}]},{type:"method",attributes:{"name":"splice"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>The first parameter defines the start index.\n  The second parameter defines number of element which will be removed\n  at the given position.\n  All folloing parameters will be added at the given position to the\n  array.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Method to remove and add new element to the array. For every remove or\nadd an event will be fired.</p>"}},{type:"return",children:[{type:"desc",attributes:{"text":"<p>An array containing the removed elements.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"qx.data.Array"}}]}]}]},{type:"method",attributes:{"name":"unshift"},children:[{type:"params",children:[{type:"param",attributes:{"name":"varargs"},children:[{type:"desc",attributes:{"text":"<p>As many elements as you want to add to the beginning.</p>"}},{type:"types",children:[{type:"entry",attributes:{"type":"var"}}]}]}]},{type:"desc",attributes:{"text":"<p>Adds the given items to the beginning of the array. For every element,\na change event will be fired.</p>"}}]}]}]}